package com.company;
import java.util.*;


class Job {
    String jobName;
    int jobLength;
    int currentJobLength;
    int jobPriority;
    int finalPriority;
    long entryTime;
    long endTime = 0;
    long waitTime = 0;
   // long currentTime = 0;
    int priorityIndex = 0;
    int index;


    public Job(int i) { // Job object
        setName(i+1);
        setLength();
        setCurrentLength();
        setPriority();
        setFinalPriority();
        setEntryTime(i);
        setEndTime(0);
        setWaitTime(0);
   //     setCurrentTime(i);
        setIndex(i);
    }

    public void setIndex(int index){
        this.index = index;
    }

    public int getIndex(){
        return this.index;
    }

    public void setName(int i){
        this.jobName = "Job_" + i;
    }

    public String getName(){
        return this.jobName;
    }

    public void setLength() {
        int min = 1;
        int max = 70;
        this.jobLength = (int) (Math.random() * max + min);
    }

    public int getLength() {
        return this.jobLength;
    }

    public void decreaseLengthByOne(){
        this.currentJobLength --;
    }

    public void setCurrentLength() {
        this.currentJobLength = getLength();
    }

    public int getCurrentLength(){
        return this.currentJobLength;
    }

    public void setPriority() {
        int min = 1;
        int max = 40;
        this.jobPriority = (int) (Math.random() * max + min);
    }

    public int getPriority() {
        return this.jobPriority;
    }

    public void setFinalPriority() {
        this.finalPriority = getPriority();
    }

    public void changePriority(int newPriority){
        this.finalPriority = newPriority;
    }

    public int getFinalPriority() {
        return this.finalPriority;
    }

    public void setEntryTime(long i){
        this.entryTime = i;
    }

    public long getEntryTime() {
        return this.entryTime;
    }

    public void setEndTime(long i){
        this.endTime = i;
    }

    public long getEndTime() {
        return this.endTime;
    }

    public void setWaitTime(long i){
        this.waitTime = i;
    }

    public long getWaitTime() {
        return this.waitTime;
    }

    public int getPriorityIndex(){
        return this.priorityIndex;
    }

 /*   public void setCurrentTime(long i){
        this.currentTime = i;
    }

    public long getCurrentTime(){
        return this.currentTime;
    }*/
}

class PriorityQueueSimulatorTester {
    int MaxNumberOfJobs;
    List<Job> jobsInputArray = new LinkedList<>();

    public PriorityQueueSimulatorTester(int MaxNumberOfJobs){
        this.MaxNumberOfJobs = MaxNumberOfJobs;
        this.jobsInputArray = setJobsInputArray(jobsInputArray);
    }

    public int getArraySize() {
        return MaxNumberOfJobs;
    }

    public Job getJobAtIndex(int i){
        return jobsInputArray.get(i);
    }

    // list implementation
    public List<Job> setJobsInputArray(List<Job> jobsInputArray) {
        for (int i = 0; i < MaxNumberOfJobs; i++) {
            Job newJob = new Job(i);
            jobsInputArray.add(newJob);
        }
        return jobsInputArray;
    } // the list will be an unsorted list
}

class Heap {
    int currentPriorityIndex = 0;
    long totalWaitingTime=0;
    long currentTime = 0;
    long priorityChangeCounter = 0;
    List<Job> jobArray = new ArrayList<>();

    public Heap(PriorityQueueSimulatorTester testerQueue) {
        for (int i = 0; i < testerQueue.getArraySize(); i++) {
            this.jobArray.add(testerQueue.getJobAtIndex(i));
            this.jobArray.get(i).setIndex(i);
            this.jobArray.get(i).setEntryTime(i);
        }
        int index = (testerQueue.getArraySize() / 2) - 1;
        for (int i = index; i >= 0; i--) {
            sortTheHeap(i);
            incrementCurrentTime();
            this.jobArray.get(i).setEntryTime(currentTime);
        }
    }

    public void sortTheHeap(int currentIndex) {
        int largest = currentIndex; // Initialize largest as root
        int left_child = 2 * currentIndex + 1;
        int right_child = 2 * currentIndex + 2;

        if (left_child < this.jobArray.size() && this.jobArray.get(left_child).getPriority() > this.jobArray.get(largest).getPriority())
            largest = left_child;

        if (right_child < this.jobArray.size() && this.jobArray.get(right_child).getPriority() > this.jobArray.get(largest).getPriority())
            largest = right_child;

        // If largest is not root
        if (largest != currentIndex) {
            Job buffer = this.jobArray.get(currentIndex);
            this.jobArray.set(currentIndex, this.jobArray.get(largest));
            this.jobArray.set(largest, buffer);
            sortTheHeap(largest);
        }
        setPriorityIndex();
    }

    public void printHeap() {
        System.out.println("Array representation of Heap is:");

        for (Job job : this.jobArray)
            System.out.println(job.getName() + "\t\tPriority: " + job.getPriority() + "   \t\tLength: " + job.getLength());
    }

    public void setPriorityIndex(){
        for (int i = 0; i < this.jobArray.size() ; i++)
            for (int priority = 1; priority <=40; priority++)
                if (this.jobArray.get(i).getPriority() == priority) {
                    this.jobArray.get(i).priorityIndex = i;
                    break;
                }
    }

    public void incrementCurrentTime(){
        this.currentTime++;
    }

    public long getCurrentTime(){
        return this.currentTime;
    }

    /*public void swap(int minIndex){
        Job bufferJob = this.jobArray.get(0);
        this.jobArray.set(minIndex, this.jobArray.get(0));
        this.jobArray.set(0, bufferJob);
        priorityChangeCounter++;
    }*/

    public void setTotalWaitingTime(long i){
        this.totalWaitingTime = i + this.totalWaitingTime;
    }

    public long getTotalWaitingTime(){
        return this.totalWaitingTime;
    }

    public long getPriorityChangeCounter() {
        return this.priorityChangeCounter;
    }

}

class SortedList{
    List<Job> jobArray;

    public SortedList(PriorityQueueSimulatorTester testerQueue) {
        List<Job> bufferArray = new ArrayList<>();
        // higher priority at the en of the queue
        for (int priority = 40; priority >= 1; priority--) {
            //go through all the array searching for the priority from 1 to 40 -> complexity of 40n -> O(n)
            for (int i = 0; i < testerQueue.getArraySize(); i++) {
                if (testerQueue.getJobAtIndex(i).getPriority() == priority)
                    // we will then sort the list in term of priority in a new list
                    bufferArray.add(testerQueue.getJobAtIndex(i));
            }
        }
        this.jobArray = bufferArray;
    }

    public void printList() {
        System.out.println("Sorted list representation of Heap is:");

        for (Job job : this.jobArray)
            System.out.println(job.getName() + "\t\tPriority: " + job.getPriority() + "   \t\tLength: " + job.getLength());
    }
}


public class Main {

    public static void main(String[] args) {

        // for (int MaxNumberOfJobs = 100 ; MaxNumberOfJobs <= 1000000; MaxNumberOfJobs = MaxNumberOfJobs * 10) {
        PriorityQueueSimulatorTester testerQueue = new PriorityQueueSimulatorTester(100);


        SortedList sorted_list = new SortedList(testerQueue);  // higher priority at the end of the queue
        sorted_list.printList();// sorted list as an Array List based on the priority

        Heap heap = new Heap(testerQueue); // unsorted array based heap
        heap.printHeap();  // (higher priority at the leaves)

        long startTime = System.nanoTime();
        int cycleCounter = 0;

        while (heap.jobArray != null) {
            if (cycleCounter == 30) {
                int minIndex = findMinPriorityIndex(heap);
                heap.jobArray.get(minIndex).changePriority(1);
                heap.sortTheHeap(0);
                heap.priorityChangeCounter++;
                cycleCounter = 0;
            }
            int changingIndex = findMaxPriority(heap);

            PCU_Execution(heap, changingIndex);
            cycleCounter++;
        }

        System.out.println("Current cycle time: " + heap.getCurrentTime() + "cycles\nTotal number of jobs executed: " + heap.jobArray.size() +
                "jobs\nAverage process waiting time :" + heap.getTotalWaitingTime() + "cycles\nTotal number of priority changes: " +
                heap.getPriorityChangeCounter() + "\nActual system time needed to execute all jobs: " +  (System.nanoTime() - startTime));
    }

    public static int findMinPriorityIndex(Heap heap){
        int min = 0;
        for (int i = 0; i < heap.jobArray.size(); i++)
            if (heap.jobArray.get(i).getPriority() >= min)
                min = i;
        return min;
    }

    public static int findMaxPriority(Heap heap) {
        int max = 40;
        for (int i = 0; i < heap.jobArray.size(); i++)
            if (heap.jobArray.get(i).getPriority() < max) {
                max = heap.jobArray.get(i).getPriority();
                heap.currentPriorityIndex++;
            }
        return max;
    }

   /* public static int findMaxPriorityIndex(Heap heap, int previouslyChangedIndex, int previousPriority) {
        int maxIndex = 0;

        else for (int index = 0; index < heap.jobArray.size(); index++) {
            if (heap.jobArray.get(index).getPriority() < previousPriority) {
                maxIndex = index;
            }
        }
        return maxIndex;
    }*/

    public static void PCU_Execution(Heap heap, int changingIndex) {

        heap.jobArray.get(changingIndex).decreaseLengthByOne();
        if (heap.jobArray.get(changingIndex).getLength() != 0) {
            heap.incrementCurrentTime();
        }
        if (heap.jobArray.get(changingIndex).getLength() == 0) {
            heap.jobArray.get(changingIndex).setEndTime(heap.currentTime);
            heap.jobArray.get(changingIndex).setWaitTime(heap.jobArray.get(changingIndex).getEndTime() - heap.jobArray.get(changingIndex).getEntryTime() - heap.jobArray.get(changingIndex).getLength());
            heap.jobArray.remove(heap.jobArray.get(changingIndex));
            heap.setTotalWaitingTime(heap.jobArray.get(changingIndex).getWaitTime());
            heap.sortTheHeap(0);
        }
        //  heap.jobArray.get(changingIndex).
        System.out.println("Now executing: " + heap.jobArray.get(changingIndex).getName() + ".\tJob length: " +
                heap.jobArray.get(changingIndex).getLength() + " cycles.\tCurrent remaining length: " +
                heap.jobArray.get(changingIndex).getCurrentLength() + " cycles.\tInitial priority: " +
                heap.jobArray.get(changingIndex).getPriority() + ".\tCurrent Priority: " +
                heap.jobArray.get(changingIndex).getFinalPriority());
    }
}
